#!/usr/bin/env ruby
require 'rubygems'
require 'fileutils'
require 'yaml'
require 'nokogiri'
require 'pathname'
require 'colored'
require_relative 'lib/agric/version'

module Agric
  class Compiler

    SVG_NAMESPACES = {
      :dc => "http://purl.org/dc/elements/1.1/",
      :cc => "http://creativecommons.org/ns#",
      :rdf => "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      :svg => "http://www.w3.org/2000/svg",
      :sodipodi => "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
      :inkscape => "http://www.inkscape.org/namespaces/inkscape"
    }
    
    META = {
      filename: "agric",
      family:   "Agric",
      version:   Agric::VERSION,
      name:     "agric"
    }

    def initialize(options = {})
      @root = Pathname.new(File.expand_path(__FILE__)).dirname
      @sources = @root.join("src")
      @lib = @root.join("lib")
      @assets = @root.join("app", "assets")
      @compiler_dir = @root.join("compiler")
      @convert_script = @compiler_dir.join("convert.pe")
      @glyphs = @root.join("glyphs")
      @output_font_file = @assets.join("fonts", "#{META[:filename]}.svg")
      @aliases = {}
    end
    

    def command(cmds)
      puts cmds.to_s.cyan
      system(cmds)
    end
    

    def prepare_font_awesome(options = {})
      puts "Prepare awesome...".yellow
      tag = options[:tag] || "4.3.0"
      font_awesome_dir = @root.join("tmp", "fonts", "awesome-#{tag}")
      awesome_dir = options[:output] || @sources.join("100-awesome")

      # Get latest Font-Awesome
      unless File.exist?(font_awesome_dir)
        puts " * Download awesome...".yellow
        FileUtils.mkdir_p(font_awesome_dir.dirname)
        Dir.chdir(font_awesome_dir.dirname) do
          unless File.exist?("v#{tag}.tar.gz")
            command("wget https://github.com/FortAwesome/Font-Awesome/archive/v#{tag}.tar.gz")
          end
          command("tar xzvf v#{tag}.tar.gz")
          FileUtils.mv("Font-Awesome-#{tag}", font_awesome_dir.basename)
        end
      end

      # Normalize Font-Awesome
      puts " * Sets config...".yellow
      hexa = {}
      FileUtils.rm_rf(awesome_dir)
      FileUtils.mkdir_p(awesome_dir)
      File.open(awesome_dir.join("config.yml"), "wb") do |f|
        icons = YAML.load_file(font_awesome_dir.join("src", "icons.yml"))
        # raise icons.inspect
        config = {"glyphs" => icons["icons"].collect{|h| {"css" => h["id"], "from" => "0x" + h["unicode"]} } }
        for icon in icons["icons"]
          hexa[icon['unicode']] = icon['id']
          if icon['aliases']
            for a in icon['aliases']
              @aliases[a] = icon['id']
              config["glyphs"] << {"css" => a ,"from" => "0x" + icon["unicode"] }
            end
          end
        end
        f.write(config.to_yaml)
      end
      
      puts " * Write normalized file...".yellow
      source = font_awesome_dir.join("src", "assets", "font-awesome", "fonts", "FontAwesome.otf")
      command("fontforge -quiet -script #{@convert_script} #{source.to_s} svg")
      interm = source.dirname.join("FontAwesome.svg")
      i = File.open(interm)
      doc = Nokogiri::XML(i) do |config|
        config.nonet.strict.noblanks
      end
      i.close
      doc.root.xpath("//svg:glyph[@d]", SVG_NAMESPACES).each do |glyph|
        name = glyph.attr("glyph-name")
        unicode = glyph.attr("unicode").to_s
        if unicode[0]
          hex = "%4.4x" % unicode[0].ord
          name = hexa[hex]
        end        
        puts "    -  weird name: #{name.to_s.red}" unless name =~ /^[a-z0-9]+((\_|\-)[a-z0-9]+)*$/
        glyph["glyph-name"] = name.gsub(/[^a-z0-9]+/, '-')
      end
      doc.root.default_namespace = SVG_NAMESPACES[:svg]
      for name, url in SVG_NAMESPACES
        doc.root.add_namespace(name.to_s, url)
      end
      File.open(awesome_dir.join("font.svg"), "wb") do |f|
        f.write doc.to_s
      end
    end


    # Explodes all font characters in one dir
    def explode_fonts
      puts "Explode fonts...".yellow
      FileUtils.rm_rf(@glyphs)
      FileUtils.mkdir_p(@glyphs)
      Dir.chdir(@sources) do
        for font_fullname in Dir["*"].sort
          font_dir = @sources.join(font_fullname)
          font_name = font_fullname.split("-")[1..-1].join("-")
          font_file = font_dir.join("font.svg")
          config_file = font_dir.join("config.yml")
          if font_file.exist? and config_file.exist?
            command("svg-font-dump -n -c #{config_file} -f -i #{font_file} -o #{@glyphs}")
            # if font_fullname =~ /\-awesome$/
            #   command("svg-font-dump -i #{font_file} -o #{@glyphs}")
            #   for glyph in YAML.load_file(config_file)['glyphs']
            #     FileUtils.cp(@glyphs.join("glyph__#{glyph['from'][2..-1]}.svg"), @glyphs.join("#{glyph['css']}.svg"))
            #   end
            #   for f in Dir[@glyphs.join("glyph__*.svg")]
            #     FileUtils.rm_rf(f)
            #   end
            # else
            #   command("svg-font-dump -n -c #{config_file} -f -i #{font_file} -o #{@glyphs}")
            # end
          end
        end
      end
      Dir.chdir(@glyphs) do
        Dir.glob("*.svg").sort.collect do |cf|
          unless cf.split(/\./).first.to_s =~ /^[a-z0-9]+((\_|\-)[a-z0-9]+)*$/
            puts " - " + "Remove #{cf.to_s}".red
            FileUtils.rm_f(cf)
          end
        end
      end
    end      
    

    def compile!
      puts "Compiler dir: #{@compiler_dir}".yellow
      puts "Sources dir:  #{@sources}".yellow

      prepare_font_awesome

      explode_fonts
      
      config_file = @compiler_dir.join('config.yml')
      config = {
        "font" => {
          "version" => META[:version],
          "fontname" => META[:name],
          "fullname" => "#{META[:family]} (#{META[:name]})",
          "familyname" => META[:family],
          "copyright" => "Copyright (C) 2013-#{Date.today.year} by #{META[:family]}",
          "ascent" => 850,
          "descent" => 150,
          "weight" => "Regular"
        }
      }

      reference_file = @compiler_dir.join('reference.yml')
      FileUtils.cp(reference_file, @root.join("tmp", "reference-#{Time.now.to_i.to_s(36)}.yml"))
      reference = YAML.load_file(reference_file)
      reference = {} unless reference.is_a?(Hash)

      icons = {}

      Dir.chdir(@glyphs) do
        Dir.glob("*.svg").sort.collect do |cf|
          name = cf.split(/\./).first.to_s
          unless reference.has_key?(name)
            reference[name] = (reference.values.sort.last || "efff").to_i(16).succ.to_s(16)
          end
          icons[name] = reference[name]
        end
      end

      # Removes undefined glyphs from reference
      for ref in reference.keys
        reference.delete(ref) unless icons.keys.include?(ref)
      end

      File.open(reference_file, "wb") do |f|
        f.write "# Auto-updated. Nothing to touch.\n"
        for name, code in reference
          f.write "'#{name}': '#{code}'\n"
        end
      end

      # Build glyphs
      config["glyphs"] = icons.sort{|a,b| a[1] <=> b[1]}.collect do |name, unicode|
        {"css" => name, "code" => unicode.to_i(16)}
      end
      
      File.open(config_file, "wb") do |f|
        f.write config.to_yaml
      end

      return if ENV["ONLY"] == "explode"

      # Recompose font
      command("svg-font-create -c #{config_file} -s #{@compiler_dir.join('svgo.yml')} -i #{@glyphs} -o #{@output_font_file}")

      # Adds aliases
      @aliases.each do |name, original|
        icons[name] ||= icons[original]
      end
      
      puts "Update font.svg".yellow

      f = File.open(@output_font_file)
      doc = Nokogiri::XML(f) do |config|
        config.nonet.strict.noblanks
      end
      f.close

      doc.root.xpath("//font-face[@font-family]").each do |face|
        face["font-family"] = META[:family]
      end
      File.open(@output_font_file, "wb") do |f|
        f.write doc.to_s
      end
      
      puts "Export font in other formats...".yellow

      # Convert SVG font to all needed format
      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} ttf")
      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} woff")
      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} eot")
      command("rm -f #{@output_font_file.dirname.join('*.afm')}")

      puts "Write paths stylesheet...".yellow

      # Write SCSS file to manage list of icons
      File.open(@assets.join("stylesheets", "agric", "paths.scss"), "wb") do |f|
        f.write "/* Auto-generated. Nothing to touch */\n"
        f.write "@font-face {\n"
        f.write "  font-family: '#{META[:family]}';\n"
        f.write "  font-weight: normal;\n"
        f.write "  font-style: normal;\n"
        f.write "  src: font-url('#{META[:filename]}.eot?v=#{META[:version]}');\n"
        f.write "  src: font-url('#{META[:filename]}.eot?#iefix&v=#{META[:version]}') format('embedded-opentype'),\n"
        f.write "    font-url('#{META[:filename]}.woff?v=#{META[:version]}') format('woff'),\n"
        f.write "    font-url('#{META[:filename]}.ttf?v=#{META[:version]}') format('truetype'),\n"
        f.write "    font-url('#{META[:filename]}.svg?v=#{META[:version]}') format('svg');\n"
        f.write "}\n"
      end

      puts "Write list stylesheet...".yellow
      File.open(@assets.join("stylesheets", "agric", "list.scss"), "wb") do |f|
        f.write "/* Auto-generated. Nothing to touch */\n"
        f.write "$agric-icons: (\n"
        icons.sort.each do |name, code|
          f.write "  (\"#{name}\" \"\\#{code}\")\n"
        end
        f.write ")\n"
      end

      puts "Write icons stylesheet...".yellow
      File.open(@assets.join("stylesheets", "agric", "icons.scss"), "wb") do |f|
        f.write "/* Auto-generated. Nothing to touch */\n"
        for name, code in icons.sort
          f.write "$agric-icons-#{name}: \"\\#{code}\";\n"
        end
        f.write "\n"
        for name, code in icons.sort
          f.write ".icon-#{name}:before { content: $agric-icons-#{name} };\n"
        end
      end

      puts "Finished!".green
    end



  end

end


Agric::Compiler.new.compile!
